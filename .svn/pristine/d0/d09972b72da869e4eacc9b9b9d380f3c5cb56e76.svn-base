import java.util.*;
import java.io.IOException;
import java.util.Date;
import java.text.SimpleDateFormat;

public class ManageBooking {	
	public static Scanner sc = new Scanner(System.in);	
	public void book() throws IOException{
		@SuppressWarnings("resource")
		Scanner sc = new Scanner(System.in);		
		// List movie
		int valid =  Function.movieListing();
		if (valid == 0){
			System.out.println("No movie in database");
		} else {
			// Get movie ID
			System.out.println("Enter movie index: ");
			if(!sc.hasNextInt() ){
				System.out.println("Error! Invalid input format");
			} else {
				int movieIndex = sc.nextInt();
				// list show
				boolean c1 = Function.showListing(movieIndex);
				if (c1==true){
					//do booking
					System.out.println("Enter show index: ");
					if(!sc.hasNextInt() ){
						System.out.println("Error! Invalid input format");
					} 
					else {
						//-------------------
						int showIndex = sc.nextInt();
						bookMovieShow(movieIndex,showIndex);
					}
				}
			}
		}
	}
	private static void bookMovieShow(int movieIndex, int showIndex) throws IOException{
		if (showIndex>=MoblimaApp.movieList.get(movieIndex).getMovieShowList().size()){
			System.out.println("Error! Invalid choice");
		} else {
			ShowItem show = MoblimaApp.movieList.get(movieIndex).getMovieShowList().get(showIndex);
			//check show available for booking
			if ((Integer.parseInt(show.getShowDate())<Integer.parseInt(Function.today()))
					&(Integer.parseInt(show.getShowTime())<Integer.parseInt(Function.now()))) {	//check if show avaiable for booking
					System.out.println("This show is not available for booking");
			} else {
				//
				show.printCinema();
				System.out.println("Enter your choice of seat:");
				//sc.nextLine();
				String seatId = sc.nextLine();
				//validate seatId
				boolean check = show.validateSeatId(seatId.toUpperCase());
				if (check == false) {
					System.out.println("You cannot select this seat");
				} else {
					System.out.println("Enter your email address: ");
					String email = sc.nextLine();
					ManageGoer mGoer = new ManageGoer();
					GoerItem goer = mGoer.searchGoer(email);	
					if (goer==null){
						System.out.println("Enter your name:");
						String name = sc.nextLine();
						System.out.println("Enter your phone:");
						String phone = sc.nextLine();
						System.out.println("Select your Type ID:");
						for (int i = 0 ; i < Constant.goerType.length ; i++){
							System.out.println(i + " " + Constant.goerType[i]);
						}
						if(!sc.hasNextInt() ){
							System.out.println("Error! Invalid input");
						} else {
							int type = sc.nextInt();
							if (type>Constant.goerType.length-1){
								System.out.println("Invalid input");
							} else { 
								goer = mGoer.newGoer(name, email, phone, type);
								goer.writeGoer();
								// now we have goer and show id, seatId, let's do booking
								createBooking(show, goer, seatId);
								//done
							}
						}
					} else {
						createBooking(show, goer, seatId);
					}
				}
			}
		}
		
	} 
	private static void createBooking(ShowItem show, GoerItem goer, String seatId) throws IOException{
		//Handle the daet
		Date dNow = new Date( );
	    SimpleDateFormat ft = new SimpleDateFormat ("yyyyMMddhhmm");
	    //create booking object
	    SeatItem s =  show.getSeat(seatId.toUpperCase());
		BookingItem book = new BookingItem(ft.format(dNow), goer,s, show);
		book.writeBooking();
		//show invoice
		showInvoice(book);
	}

	private static void showInvoice(BookingItem book){
		System.out.println("--------- Booking Invoice-----------");
		book.printBooking();
	}
	
}

